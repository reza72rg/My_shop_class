# Generated by Django 3.2.12 on 2023-10-12 13:39

import admin_theme.tools
import ckeditor.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import main.tools
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('admin_theme', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
            ],
            options={
                'verbose_name': 'brand',
                'verbose_name_plural': 'brands',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
            ],
            options={
                'verbose_name': 'cart',
                'verbose_name_plural': 'carts',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='eshop.category')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='DiscountCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('percent', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='discount percent')),
                ('code', models.CharField(default=admin_theme.tools.create_code, max_length=255, unique=True, verbose_name='code')),
            ],
            options={
                'verbose_name': 'discount code',
                'verbose_name_plural': 'discount codes',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('code', models.PositiveSmallIntegerField(default=0, unique=True, verbose_name='code')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
            ],
            options={
                'verbose_name': 'paymwent method',
                'verbose_name_plural': 'payment methods',
            },
        ),
        migrations.CreateModel(
            name='PaymentStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('code', models.PositiveSmallIntegerField(default=0, unique=True, verbose_name='code')),
                ('title', models.CharField(default='', max_length=255, unique=True, verbose_name='title')),
            ],
            options={
                'verbose_name': 'payment status',
                'verbose_name_plural': 'payment statuses',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('image', models.ImageField(upload_to=main.tools.UploadToPathAndRename('products'), verbose_name='product image')),
                ('image_cropping_info', models.CharField(blank=True, max_length=100, null=True, verbose_name='cropping info')),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('view', models.PositiveIntegerField(default=0, verbose_name='view')),
                ('price', models.PositiveIntegerField(default=0, verbose_name='price')),
                ('release_date', models.DateTimeField(blank=True, null=True, verbose_name='release date')),
                ('weight', models.PositiveIntegerField(default=0, help_text='input value as Grams', verbose_name='weight')),
                ('count', models.PositiveIntegerField(default=100, verbose_name='count')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('min_purchase', models.PositiveIntegerField(default=0, verbose_name='minimum purchase')),
                ('max_purchase', models.PositiveIntegerField(default=100, verbose_name='maximum purchase')),
                ('has_tax', models.BooleanField(default=False, verbose_name='has tax')),
                ('tax_percent', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='tax percent')),
                ('has_value_added_tax', models.BooleanField(default=False, verbose_name='has value added tax')),
                ('meta_keywords', models.CharField(blank=True, help_text="separate with comma (used in the site's header for seo)", max_length=200, null=True, verbose_name='keywords')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eshop.brand', verbose_name='brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eshop.category', verbose_name='category')),
            ],
            options={
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='title')),
                ('site_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='site title')),
                ('site_icon', models.ImageField(upload_to=main.tools.UploadToPathAndRename('setting'), verbose_name='site icon')),
                ('site_logo', models.ImageField(upload_to=main.tools.UploadToPathAndRename('setting'), verbose_name='site logo')),
                ('contact_us', ckeditor.fields.RichTextField()),
                ('product_finishing_alert', models.PositiveIntegerField(default=10, verbose_name='product finishing alert')),
                ('value_added_tax_percent', models.PositiveIntegerField(default=9, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='value added tax percent')),
                ('has_value_added_tax', models.BooleanField(default=True, verbose_name='has value added tax')),
                ('soomasoft_webservice_user', models.CharField(default='', max_length=50, verbose_name='soomasoft web service user')),
                ('soomasoft_webservice_password', models.CharField(default='', max_length=50, verbose_name='soomasoft web service password')),
                ('soomasoft_webservice_otp_number', models.CharField(default='', max_length=50, verbose_name='soomasoft otp number')),
            ],
            options={
                'verbose_name': 'settings',
                'verbose_name_plural': 'settings',
            },
        ),
        migrations.CreateModel(
            name='ShippingStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('code', models.PositiveSmallIntegerField(default=0, unique=True, verbose_name='code')),
                ('title', models.CharField(default='', max_length=255, unique=True, verbose_name='title')),
            ],
            options={
                'verbose_name': 'shipping status',
                'verbose_name_plural': 'shipping statuses',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='ShippingMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('code', models.PositiveSmallIntegerField(default=0, unique=True, verbose_name='code')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('payment_methods', models.ManyToManyField(to='eshop.PaymentMethod', verbose_name='payment methods')),
            ],
            options={
                'verbose_name': 'shipping method',
                'verbose_name_plural': 'shipping methods',
            },
        ),
        migrations.CreateModel(
            name='ShippingCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('from_weight', models.PositiveIntegerField(default=0, help_text='Grams', verbose_name='from weight')),
                ('to_weight', models.PositiveIntegerField(default=0, help_text='Grams', verbose_name='to weight')),
                ('price', models.PositiveIntegerField(default=0, help_text='toman', verbose_name='price')),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('states', models.ManyToManyField(to='admin_theme.State', verbose_name='destination states')),
            ],
            options={
                'verbose_name': 'shipping cost',
                'verbose_name_plural': 'shipping costs',
            },
        ),
        migrations.CreateModel(
            name='ProductProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('title', models.CharField(default='', max_length=255, verbose_name='title')),
                ('value', models.CharField(default='', max_length=255, verbose_name='value')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eshop.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'product property',
                'verbose_name_plural': 'product properties',
            },
        ),
        migrations.CreateModel(
            name='ProductMonetaryOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=200, verbose_name='option')),
                ('price', models.PositiveIntegerField(default=0, help_text='Toman', verbose_name='price')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eshop.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'product monetary option',
                'verbose_name_plural': 'product monetary options',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=main.tools.UploadToPathAndRename('products'), verbose_name='product image')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eshop.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'product image',
                'verbose_name_plural': 'product images',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='shipping_methods',
            field=models.ManyToManyField(to='eshop.ShippingMethod', verbose_name='shipping merthods'),
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('percent', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='discount percent')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='eshop.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'discount',
                'verbose_name_plural': 'discounts',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='create date')),
                ('modify_date', models.DateTimeField(auto_now=True, null=True, verbose_name='modify date')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('count', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='count')),
                ('price', models.PositiveIntegerField(default=0, verbose_name='price')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eshop.cart', verbose_name='cart')),
                ('monetary_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eshop.productmonetaryoption', verbose_name='monetary option')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eshop.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'cart item',
                'verbose_name_plural': 'cart items',
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='discount_code',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eshop.discountcode', verbose_name='discount code'),
        ),
        migrations.AddField(
            model_name='cart',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='کاربر'),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('title', 'brand'), ('title', 'category')},
        ),
    ]
